using Org.BouncyCastle.Asn1;
using Org.BouncyCastle.Asn1.Cms;
using Org.BouncyCastle.Asn1.X509;
using Org.BouncyCastle.Cms;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Operators;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Math;
using Org.BouncyCastle.OpenSsl;
using Org.BouncyCastle.Pkcs;
using Org.BouncyCastle.Security;
using Org.BouncyCastle.Tsp;
using Org.BouncyCastle.X509;
using Org.BouncyCastle.X509.Store;
using Org.BouncyCastle.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace LibTimeStamp
{
    public class TSResponderNew
    {
        private X509Certificate x509Cert;
        private AsymmetricKeyParameter priKey;
        private string hashAlg;
        private string keyType;

        public TSResponderNew(byte[] x509CertBytes, byte[] priKeyBytes, string hashAlg, string keyType)
        {
            this.x509Cert = new X509CertificateParser().ReadCertificate(x509CertBytes);
            this.priKey = ((AsymmetricCipherKeyPair)(new PemReader(new StreamReader(new MemoryStream(priKeyBytes))).ReadObject())).Private;
            this.hashAlg = hashAlg;
            this.keyType = keyType;
        }

        public byte[] GenResponse(byte[] bRequest, DateTime signTime, out bool isRFC, byte[] bSerial = null)
        {
            TimeStampRequest timeStampRequest = null;
            try
            {
                timeStampRequest = new TimeStampRequest(bRequest);
            }
            catch
            {
                timeStampRequest = null;
            }

            if (timeStampRequest == null)
            {
                isRFC = false;
                return Authenticode(bRequest, signTime);
            }
            else
            {
                isRFC = true;
                if (bSerial == null)
                {
                    bSerial = new byte[16];
                    new Random().NextBytes(bSerial);
                }
                BigInteger biSerial = new BigInteger(1, bSerial);
                return RFC3161(bRequest, signTime, biSerial);
            }
        }

        private byte[] RFC3161(byte[] bRequest, DateTime signTime, BigInteger biSerial)
        {
            TimeStampRequest timeStampRequest = new TimeStampRequest(bRequest);

            Asn1EncodableVector signedAttributes = new Asn1EncodableVector();
            signedAttributes.Add(new Attribute(CmsAttributes.ContentType, new DerSet(new DerObjectIdentifier("1.2.840.113549.1.7.1"))));
            signedAttributes.Add(new Attribute(CmsAttributes.SigningTime, new DerSet(new DerUtcTime(signTime))));
            AttributeTable signedAttributesTable = new AttributeTable(signedAttributes);

            // 直接指定算法 OID
            string digestOid = "2.16.840.1.101.3.4.2.1"; // 示例：SHA-256 的 OID
            TimeStampTokenGenerator timeStampTokenGenerator = new TimeStampTokenGenerator(priKey, x509Cert, digestOid, "1.3.6.1.4.1.13762.3", signedAttributesTable, null);
            timeStampTokenGenerator.SetCertificates(new X509Certificate[] { x509Cert });
            TimeStampResponseGenerator timeStampResponseGenerator = new TimeStampResponseGenerator(timeStampTokenGenerator, TspAlgorithms.Allowed);
            TimeStampResponse timeStampResponse = timeStampResponseGenerator.Generate(timeStampRequest, biSerial, signTime);
            return timeStampResponse.GetEncoded();
        }

        private byte[] Authenticode(byte[] bRequest, DateTime signTime)
        {
            string requestString = "";
            for (int i = 0; i < bRequest.Length; i++)
            {
                if (bRequest[i] >= 32)
                    requestString += (char)bRequest[i];
            }
            bRequest = Convert.FromBase64String(requestString);

            Asn1InputStream asn1InputStream = new Asn1InputStream(bRequest);
            Asn1Sequence instance = Asn1Sequence.GetInstance(asn1InputStream.ReadObject());
            Asn1Sequence instance2 = Asn1Sequence.GetInstance(instance[1]);
            Asn1TaggedObject instance3 = Asn1TaggedObject.GetInstance(instance2[1]);
            Asn1OctetString instance4 = Asn1OctetString.GetInstance(instance3.GetObject());
            byte[] octets = instance4.GetOctets();
            asn1InputStream.Close();

            Asn1EncodableVector signedAttributes = new Asn1EncodableVector();
            signedAttributes.Add(new Attribute(CmsAttributes.ContentType, new DerSet(new DerObjectIdentifier("1.2.840.113549.1.7.1"))));
            signedAttributes.Add(new Attribute(CmsAttributes.SigningTime, new DerSet(new DerUtcTime(signTime))));
            AttributeTable signedAttributesTable = new AttributeTable(signedAttributes);

            SignerInfoGeneratorBuilder signerInfoBuilder = new SignerInfoGeneratorBuilder();
            signerInfoBuilder.WithSignedAttributeGenerator(new DefaultSignedAttributeTableGenerator(signedAttributesTable));

            ISignatureFactory signatureFactory;
            if (this.keyType == "SM2")
            {
                signatureFactory = new Asn1SignatureFactory("SHA256WITHSM2", priKey);
            }
            else
            {
                signatureFactory = new Asn1SignatureFactory(hashAlg + "WithRSA", priKey);
            }

            CmsSignedDataGenerator generator = new CmsSignedDataGenerator();
            generator.AddSignerInfoGenerator(signerInfoBuilder.Build(signatureFactory, x509Cert));
            generator.AddCertificates(new X509Certificate[] { x509Cert });
            CmsSignedData cmsSignedData = generator.Generate(new CmsProcessableByteArray(octets), true);
            byte[] result = cmsSignedData.ContentInfo.GetEncoded();
            return Encoding.ASCII.GetBytes(Convert.ToBase64String(result));
        }
    }
}